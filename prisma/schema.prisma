// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  messages     Message[]     @relation("SenderMessages")
  participants Participant[]
  readReceipts MessageRead[]
  attachments  Attachment[]

  conversationsCreated Conversation[] @relation("UserConversationsCreated")

  sentRequests     ContactRequest[] @relation("SentRequests")
  receivedRequests ContactRequest[] @relation("ReceivedRequests")
}

model Conversation {
  id        Int      @id @default(autoincrement())
  title     String?
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())

  creatorId Int
  creator   User @relation("UserConversationsCreated", fields: [creatorId], references: [id])

  participants Participant[]
  messages     Message[]
}

model Participant {
  id             Int       @id @default(autoincrement())
  userId         Int
  conversationId Int
  joinedAt       DateTime  @default(now())
  deletedAt      DateTime?

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

model Message {
  id             Int       @id @default(autoincrement())
  content        String?
  senderId       Int
  conversationId Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  deleted        Boolean   @default(false)

  sender       User          @relation("SenderMessages", fields: [senderId], references: [id])
  conversation Conversation  @relation(fields: [conversationId], references: [id])
  reads        MessageRead[]
  attachments  Attachment[]
}

model MessageRead {
  id        Int      @id @default(autoincrement())
  messageId Int
  userId    Int
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId]) // asegura que un mensaje es leído solo una vez por usuario
}

model Attachment {
  id         Int      @id @default(autoincrement())
  messageId  Int
  userId     Int // quién lo subió
  url        String
  type       String // image, video, file, etc.
  uploadedAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}


model ContactRequest {
  id           Int      @id @default(autoincrement())
  senderId     Int
  receiverId   Int
  status       RequestStatus @default(PENDING)
  createdAt    DateTime @default(now())
  respondedAt  DateTime?

  sender   User @relation("SentRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId]) // evita duplicados
}
